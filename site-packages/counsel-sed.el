;;; counsel-sed.el ---
;;
;; Filename: counsel-sed.el
;; Description:
;; Author: Renat Galimov
;; Maintainer:
;; Created: Пн дек  7 13:50:30 2020 (+0300)
;; Version:
;; Package-Requires: (swiper)
;; Last-Updated: Пн дек  7 13:59:23 2020 (+0300)
;;           By: Renat Galimov
;;     Update #: 22
;; URL:
;; Doc URL:
;; Keywords:
;; Compatibility:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:


(require 'swiper)

(defun counsel-sed-output (&optional query)
  "Call 'jq' with the QUERY with a default of '.'."
  (with-current-buffer
      ;; The user entered the `counsel-jq` query in the minibuffer.
      ;; This expression uses the most recent buffer ivy-read was
      ;; invoked from.
      (ivy-state-buffer ivy-last)
    (call-process-region
     (point-min)
     (point-max)
     "sed"
     nil
     "*sed-output*"
     nil
     (or query "\"s///g\""))))

(defun counsel-sed-query-function (input)
  "Wrapper function passing INPUT over to `counsel-jq-json'."
  (when (get-buffer "*sed-output*")
      (with-current-buffer "*sed-output*"
        (erase-buffer)))
  (counsel-sed-output input)
  (split-string
   (with-current-buffer "*sed-output*"
     (buffer-string))  "\n"))

;;;###autoload
(defun counsel-sed ()
  "Counsel interface for dynamically querying jq. Whenever you're happy with the query, hit RET and the results will be displayed to you in the buffer *jq-json*."
  (interactive)
  (ivy-read "sed query: " #'counsel-sed-query-function
            :action #'(1
                      ("s" (lambda (x)
                             (split-window-below)
                             (switch-to-buffer "*sed-output*"))
                             "show"))
            :initial-input "s///g"
            :dynamic-collection t
            :caller 'counsel-jq))


(provide 'counsel-sed)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; counsel-sed.el ends here
