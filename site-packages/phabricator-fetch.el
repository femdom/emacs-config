;;; phabricator-fetch.el --- -*- lexical-binding: t; -*-
;;
;; Filename: phabricator-fetch.el
;; Description:
;; Author: Renat Galimov
;; Maintainer:
;; Created: Tue Nov 17 11:08:45 2020 (+0300)
;; Version:
;; Package-Requires: ()
;; Last-Updated:
;;           By:
;;     Update #: 6
;; URL:
;; Doc URL:
;; Keywords:
;; Compatibility:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'url)
(require 'request)
(require 'generator)
(require 'org)

(defvar phabricator-fetch-api-url "https://secure.phabricator.com/api")
(defvar phabricator-fetch-api-token "")
(defvar phabricator-fetch-user-phid "PHID-USER-27ifgmumhaniizvsmwol")
(defvar phabricator-fetch-see-tasks-buffer "*Phabricator*")

(defun phabricator-fetch-endpoint-url (endpoint)
  "Make phabricator URL for the `ENDPOINT`."
  (let* ((url (url-generic-parse-url phabricator-fetch-api-url))
         (filename (expand-file-name  endpoint (url-filename url))))
    (setf (url-filename url) filename)
    (url-recreate-url url)))

(iter-defun phabricator-fetch-iter-tasks (user-id &optional after)
  "Fetch all tasks in open state that are assigned to me"
  (let* ((tasks [])
         (i 0)
         (data `(("api.token" . ,phabricator-fetch-api-token)
                 ("limit" . "100")
                 ("constraints[statuses][0]" . open)
                 ("constraints[assigned][0]" . ,user-id))))
    (if after
        (add-to-list 'data `(after . ,after))
      )
    (request (phabricator-fetch-endpoint-url "maniphest.search")
      :parser 'json-read
      :type "POST"
      :data data
      :sync t
      :success (cl-function
                (lambda (&key data &allow-other-keys)
                  (when data
                    (setq after (alist-get 'after (alist-get 'cursor (alist-get 'result data))))
                    (setq tasks (alist-get 'data (alist-get 'result data))))))
      :error (cl-function
              (lambda (&rest args &key error-thrown &allow-other-keys)
                (error "Can't fetch tasks: %S" (alist-get 'result error-thrown)))))
    (while (< i (length tasks))
      (iter-yield (elt tasks i))
      (setq i (1+ i))
      )
    (when after
      (iter-yield-from (phabricator-fetch-iter-tasks user-id after)))))

(defun phabricator-fetch--indent (input size)
  "Indent `INPUT` with `SIZE` spaces."
  (if (not (integerp size))
      (error "Size should be an integer.  Got: %s" (type-of size))
    )

  (if (not (stringp input))
      (error "Input should be a string.  Got: %s" (type-of input))
    )
  (mapconcat (lambda (line) (concat (make-string size ? ) line)) (split-string input "\n") "\n"))


(defun phabricator-fetch-format-task (task)
  "Formats the `TASK` into `org-mode` entry."
  (let* ((fields (alist-get 'fields task))
         (description (alist-get 'raw (alist-get 'description fields)))
         (task-id (alist-get 'id task))
         (name (alist-get 'name fields)))
    (mapconcat
     'identity
     `(,(concat "* TODO " name)
       "  :PROPERTIES:"
       ,(concat "  :PHABRICATOR_ID: T" (number-to-string task-id))
       "  :END:"
       "  :PHABRICATOR_DESCRIPTION:"
       ,(phabricator-fetch--indent description 2)
       "  :END:")
     "\n")))

(defun phabricator-fetch-see-tasks (&rest args)
  "Fetched phabricator tasks into `org-mode` formatted buffer.
Fetches all tasks assigned to `phabricator-fetch-user-phid`
into `phabricator-fetch-see-tasks-buffer`.
Notice that the function cleans the buffer before updating it.

Supported ARGS:

`exclude`: exclude given tasks from the output."
  (interactive)
  (let ((exclude (or (plist-get args :exclude) '())))
    (with-current-buffer (get-buffer-create "*Phabricator*")
      (erase-buffer)
      (iter-do (task (phabricator-fetch-iter-tasks phabricator-fetch-user-phid))
        (let ((task-id (format "T%s" (alist-get 'id task))))
          (if (not (member task-id exclude))
              (insert (format "%s\n" (phabricator-fetch-format-task task))))))
      (org-mode)
      (pop-to-buffer (current-buffer))))
  )

(defun phabricator-fetch--get-existing-task-ids ()
  "Return a list of phabricator tasks."
  (org-map-entries
   (lambda () (assoc-default "PHABRICATOR_ID" (org-entry-properties)))
   "-PHABRICATOR_ID=\"\""
   'agenda))


(provide 'phabricator-fetch)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; phabricator-fetch.el ends here
